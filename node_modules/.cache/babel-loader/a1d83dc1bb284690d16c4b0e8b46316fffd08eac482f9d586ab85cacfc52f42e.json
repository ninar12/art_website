{"ast":null,"code":"import * as THREE from \"three\";\nimport { extend } from \"@react-three/fiber\";\n\n// Paul West @prisoner849 https://discourse.threejs.org/u/prisoner849\n// https://discourse.threejs.org/t/simple-curved-plane/26647/10\n// This class extends the THREE.PlaneGeometry class to create a bent plane geometry.\nclass BentPlaneGeometry extends THREE.PlaneGeometry {\n  // The constructor takes a radius and any other arguments for the PlaneGeometry constructor.\n\n  constructor(radius, ...args) {\n    // Call the PlaneGeometry constructor with the provided arguments.\n    super(...args);\n    // Get the parameters of the plane.\n    let p = this.parameters;\n    // Calculate half the width of the plane.\n    let hw = p.width * 0.5;\n    // Create vectors for three points: the left edge of the plane (a), the center of the circle the plane is bent around (b), and the right edge of the plane (c).\n    let a = new THREE.Vector2(-hw, 0);\n    let b = new THREE.Vector2(0, radius);\n    let c = new THREE.Vector2(hw, 0);\n    // Calculate vectors for the sides of the triangle formed by a, b, and c.\n    let ab = new THREE.Vector2().subVectors(a, b);\n    let bc = new THREE.Vector2().subVectors(b, c);\n    let ac = new THREE.Vector2().subVectors(a, c);\n    // Calculate the radius of the circle that circumscribes the triangle.\n    let r = ab.length() * bc.length() * ac.length() / (2 * Math.abs(ab.cross(ac)));\n    // Calculate the center of the circle.\n\n    let center = new THREE.Vector2(0, radius - r);\n    // Calculate the base vector and angle.\n    let baseV = new THREE.Vector2().subVectors(a, center);\n    let baseAngle = baseV.angle() - Math.PI * 0.5;\n    // Calculate the arc of the circle.\n    let arc = baseAngle * 2;\n    // Get the uv and position attributes of the plane.\n\n    let uv = this.attributes.uv;\n    let pos = this.attributes.position;\n    // Create a vector for the main vertex.\n    let mainV = new THREE.Vector2();\n    // For each vertex in the plane...\n    for (let i = 0; i < uv.count; i++) {\n      // Calculate the uv ratio.\n\n      let uvRatio = 1 - uv.getX(i);\n      // Get the y position of the vertex.\n\n      let y = pos.getY(i);\n      // Calculate the new position of the vertex.\n\n      mainV.copy(c).rotateAround(center, arc * uvRatio);\n      // Set the new position of the vertex.\n\n      pos.setXYZ(i, mainV.x, y, -mainV.y);\n    }\n    pos.needsUpdate = true;\n  }\n}\nclass MeshSineMaterial extends THREE.MeshBasicMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this.setValues(parameters);\n    this.time = {\n      value: 0\n    };\n  }\n  onBeforeCompile(shader) {\n    shader.uniforms.time = this.time;\n    shader.vertexShader = `\n      uniform float time;\n      ${shader.vertexShader}\n    `;\n    shader.vertexShader = shader.vertexShader.replace(\"#include <begin_vertex>\", `vec3 transformed = vec3(position.x, position.y + sin(time + uv.x * PI * 4.0) / 4.0, position.z);`);\n  }\n}\nextend({\n  MeshSineMaterial,\n  BentPlaneGeometry\n});","map":{"version":3,"names":["THREE","extend","BentPlaneGeometry","PlaneGeometry","constructor","radius","args","p","parameters","hw","width","a","Vector2","b","c","ab","subVectors","bc","ac","r","length","Math","abs","cross","center","baseV","baseAngle","angle","PI","arc","uv","attributes","pos","position","mainV","i","count","uvRatio","getX","y","getY","copy","rotateAround","setXYZ","x","needsUpdate","MeshSineMaterial","MeshBasicMaterial","setValues","time","value","onBeforeCompile","shader","uniforms","vertexShader","replace"],"sources":["/Users/ninarhone/Desktop/projects/art_website/art_website/src/utils/util.js"],"sourcesContent":["import * as THREE from \"three\"\nimport { extend } from \"@react-three/fiber\"\n\n// Paul West @prisoner849 https://discourse.threejs.org/u/prisoner849\n// https://discourse.threejs.org/t/simple-curved-plane/26647/10\n// This class extends the THREE.PlaneGeometry class to create a bent plane geometry.\nclass BentPlaneGeometry extends THREE.PlaneGeometry {\n  // The constructor takes a radius and any other arguments for the PlaneGeometry constructor.\n\n  constructor(radius, ...args) {\n    // Call the PlaneGeometry constructor with the provided arguments.\n    super(...args)\n    // Get the parameters of the plane.\n    let p = this.parameters\n    // Calculate half the width of the plane.\n    let hw = p.width * 0.5\n    // Create vectors for three points: the left edge of the plane (a), the center of the circle the plane is bent around (b), and the right edge of the plane (c).\n    let a = new THREE.Vector2(-hw, 0)\n    let b = new THREE.Vector2(0, radius)\n    let c = new THREE.Vector2(hw, 0)\n    // Calculate vectors for the sides of the triangle formed by a, b, and c.\n    let ab = new THREE.Vector2().subVectors(a, b)\n    let bc = new THREE.Vector2().subVectors(b, c)\n    let ac = new THREE.Vector2().subVectors(a, c)\n    // Calculate the radius of the circle that circumscribes the triangle.\n    let r =\n      (ab.length() * bc.length() * ac.length()) / (2 * Math.abs(ab.cross(ac)))\n    // Calculate the center of the circle.\n\n    let center = new THREE.Vector2(0, radius - r)\n    // Calculate the base vector and angle.\n    let baseV = new THREE.Vector2().subVectors(a, center)\n    let baseAngle = baseV.angle() - Math.PI * 0.5\n    // Calculate the arc of the circle.\n    let arc = baseAngle * 2\n    // Get the uv and position attributes of the plane.\n\n    let uv = this.attributes.uv\n    let pos = this.attributes.position\n    // Create a vector for the main vertex.\n    let mainV = new THREE.Vector2()\n    // For each vertex in the plane...\n    for (let i = 0; i < uv.count; i++) {\n      // Calculate the uv ratio.\n\n      let uvRatio = 1 - uv.getX(i)\n      // Get the y position of the vertex.\n\n      let y = pos.getY(i)\n      // Calculate the new position of the vertex.\n\n      mainV.copy(c).rotateAround(center, arc * uvRatio)\n      // Set the new position of the vertex.\n\n      pos.setXYZ(i, mainV.x, y, -mainV.y)\n    }\n    pos.needsUpdate = true\n  }\n}\n\nclass MeshSineMaterial extends THREE.MeshBasicMaterial {\n  constructor(parameters = {}) {\n    super(parameters)\n    this.setValues(parameters)\n    this.time = { value: 0 }\n  }\n  onBeforeCompile(shader) {\n    shader.uniforms.time = this.time\n    shader.vertexShader = `\n      uniform float time;\n      ${shader.vertexShader}\n    `\n    shader.vertexShader = shader.vertexShader.replace(\n      \"#include <begin_vertex>\",\n      `vec3 transformed = vec3(position.x, position.y + sin(time + uv.x * PI * 4.0) / 4.0, position.z);`\n    )\n  }\n}\n\nextend({ MeshSineMaterial, BentPlaneGeometry })\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,oBAAoB;;AAE3C;AACA;AACA;AACA,MAAMC,iBAAiB,SAASF,KAAK,CAACG,aAAa,CAAC;EAClD;;EAEAC,WAAWA,CAACC,MAAM,EAAE,GAAGC,IAAI,EAAE;IAC3B;IACA,KAAK,CAAC,GAAGA,IAAI,CAAC;IACd;IACA,IAAIC,CAAC,GAAG,IAAI,CAACC,UAAU;IACvB;IACA,IAAIC,EAAE,GAAGF,CAAC,CAACG,KAAK,GAAG,GAAG;IACtB;IACA,IAAIC,CAAC,GAAG,IAAIX,KAAK,CAACY,OAAO,CAAC,CAACH,EAAE,EAAE,CAAC,CAAC;IACjC,IAAII,CAAC,GAAG,IAAIb,KAAK,CAACY,OAAO,CAAC,CAAC,EAAEP,MAAM,CAAC;IACpC,IAAIS,CAAC,GAAG,IAAId,KAAK,CAACY,OAAO,CAACH,EAAE,EAAE,CAAC,CAAC;IAChC;IACA,IAAIM,EAAE,GAAG,IAAIf,KAAK,CAACY,OAAO,CAAC,CAAC,CAACI,UAAU,CAACL,CAAC,EAAEE,CAAC,CAAC;IAC7C,IAAII,EAAE,GAAG,IAAIjB,KAAK,CAACY,OAAO,CAAC,CAAC,CAACI,UAAU,CAACH,CAAC,EAAEC,CAAC,CAAC;IAC7C,IAAII,EAAE,GAAG,IAAIlB,KAAK,CAACY,OAAO,CAAC,CAAC,CAACI,UAAU,CAACL,CAAC,EAAEG,CAAC,CAAC;IAC7C;IACA,IAAIK,CAAC,GACFJ,EAAE,CAACK,MAAM,CAAC,CAAC,GAAGH,EAAE,CAACG,MAAM,CAAC,CAAC,GAAGF,EAAE,CAACE,MAAM,CAAC,CAAC,IAAK,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACP,EAAE,CAACQ,KAAK,CAACL,EAAE,CAAC,CAAC,CAAC;IAC1E;;IAEA,IAAIM,MAAM,GAAG,IAAIxB,KAAK,CAACY,OAAO,CAAC,CAAC,EAAEP,MAAM,GAAGc,CAAC,CAAC;IAC7C;IACA,IAAIM,KAAK,GAAG,IAAIzB,KAAK,CAACY,OAAO,CAAC,CAAC,CAACI,UAAU,CAACL,CAAC,EAAEa,MAAM,CAAC;IACrD,IAAIE,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,CAAC,GAAGN,IAAI,CAACO,EAAE,GAAG,GAAG;IAC7C;IACA,IAAIC,GAAG,GAAGH,SAAS,GAAG,CAAC;IACvB;;IAEA,IAAII,EAAE,GAAG,IAAI,CAACC,UAAU,CAACD,EAAE;IAC3B,IAAIE,GAAG,GAAG,IAAI,CAACD,UAAU,CAACE,QAAQ;IAClC;IACA,IAAIC,KAAK,GAAG,IAAIlC,KAAK,CAACY,OAAO,CAAC,CAAC;IAC/B;IACA,KAAK,IAAIuB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,EAAE,CAACM,KAAK,EAAED,CAAC,EAAE,EAAE;MACjC;;MAEA,IAAIE,OAAO,GAAG,CAAC,GAAGP,EAAE,CAACQ,IAAI,CAACH,CAAC,CAAC;MAC5B;;MAEA,IAAII,CAAC,GAAGP,GAAG,CAACQ,IAAI,CAACL,CAAC,CAAC;MACnB;;MAEAD,KAAK,CAACO,IAAI,CAAC3B,CAAC,CAAC,CAAC4B,YAAY,CAAClB,MAAM,EAAEK,GAAG,GAAGQ,OAAO,CAAC;MACjD;;MAEAL,GAAG,CAACW,MAAM,CAACR,CAAC,EAAED,KAAK,CAACU,CAAC,EAAEL,CAAC,EAAE,CAACL,KAAK,CAACK,CAAC,CAAC;IACrC;IACAP,GAAG,CAACa,WAAW,GAAG,IAAI;EACxB;AACF;AAEA,MAAMC,gBAAgB,SAAS9C,KAAK,CAAC+C,iBAAiB,CAAC;EACrD3C,WAAWA,CAACI,UAAU,GAAG,CAAC,CAAC,EAAE;IAC3B,KAAK,CAACA,UAAU,CAAC;IACjB,IAAI,CAACwC,SAAS,CAACxC,UAAU,CAAC;IAC1B,IAAI,CAACyC,IAAI,GAAG;MAAEC,KAAK,EAAE;IAAE,CAAC;EAC1B;EACAC,eAAeA,CAACC,MAAM,EAAE;IACtBA,MAAM,CAACC,QAAQ,CAACJ,IAAI,GAAG,IAAI,CAACA,IAAI;IAChCG,MAAM,CAACE,YAAY,GAAI;AAC3B;AACA,QAAQF,MAAM,CAACE,YAAa;AAC5B,KAAK;IACDF,MAAM,CAACE,YAAY,GAAGF,MAAM,CAACE,YAAY,CAACC,OAAO,CAC/C,yBAAyB,EACxB,kGACH,CAAC;EACH;AACF;AAEAtD,MAAM,CAAC;EAAE6C,gBAAgB;EAAE5C;AAAkB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}